====================================
PyParsing -- A Python Parsing Module
====================================

Introduction
============

The parsing module is an alternative approach to creating and executing 
simple grammars, vs. the traditional lex/yacc approach, or the use of 
regular expressions.  The parsing module provides a library of classes 
that client code uses to construct the grammar directly in Python code.

Here is a program to parse "Hello, World!" (or any greeting of the form 
"<salutation>, <addressee>!"):

    from parsing import Word, alphas
    greet = Word( alphas ) + "," + Word( alphas ) + "!"
    hello = "Hello, World!"
    print hello, "->", greet.parseString( hello )

The program outputs the following:

    Hello, World! -> ['Hello', ',', 'World', '!']

The Python representation of the grammar is quite readable, owing to the 
self-explanatory class names, and the use of '+', '|' and '^' operator 
definitions.

The parsed results returned from parseString() can be accessed as a 
nested list, a dictionary, or an object with named attributes.

The parsing module handles some of the problems that are typically 
vexing when writing text parsers:
- extra or missing whitespace (the above program will also handle 
  "Hello,World!", "Hello  ,  World  !", etc.)
- quoted strings
- embedded comments

The .zip file includes examples of a simple SQL parser, simple CORBA IDL 
parser, a config file parser, a chemical formula parser, and a four-
function algebraic notation parser.  It also includes a simple how-to 
document, and a UML class diagram of the library's classes.



Installation
============

Do the usual:

    python setup.py install


Documentation
=============

See:

    HowToUsePyparsing.html


License
=======

    MIT License. See header of pyparsing.py

History
=======

Version 1.0.3 12/23/03
  * Incorporated standard Python distutils setup (courtesy of Dave Kuhlman)
  * Continued performance tuning
  
Version 1.0.2 12/19/03
  * Renamed from 'parsing' to 'pyparsing' for better Python linkage
  * Continued performance tuning
  * Added distExample.py to demonstrate Dist class usage

Version 1.0.1 12/18/03
  * Corrected gaffe in API, Word constructor used 'len' for a parameter 
    name, collides with Python built-in function - changed to 'exact'

Version 1.0.0 12/17/03
  * First general public release

Version 0.1.1 thru 0.1.17 - October-November, 2003
  * initial development iterations:
    . added Dict, Group
    . added helper methods oneOf, delimitedList
    . added helpers quotedString (and double and single), restOfLine, cStyleComment
    . added ignore() method
    . added MatchFirst as an alternative to the slower Or
    . added UML class diagram
    . fixed various logic bugs
